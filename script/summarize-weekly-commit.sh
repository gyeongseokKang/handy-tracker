#!/bin/bash

# Required parameters:
# @raycast.schemaVersion 1
# @raycast.title Summarize weekly-commit
# @raycast.mode compact

# Optional parameters:
# @raycast.icon üìä

# Í≤ÄÏÉâÌï† Í∏∞Î≥∏ ÎîîÎ†âÌÑ∞Î¶¨ Î™©Î°ù (ÌïÑÏöîÏóê Îî∞Îùº Ï∂îÍ∞Ä Í∞ÄÎä•)
SEARCH_DIRS=(~/Desktop/project ~/Documents/toy)
# ÏµúÎåÄ ÌÉêÏÉâ ÍπäÏù¥ ÏÑ§Ï†ï
MAX_DEPTH=3

# ÌÜµÍ≥Ñ Î≥ÄÏàò
TOTAL_REPOS=0
TOTAL_COMMITS=0

# Ï∂úÎ†• Î¶¨Ïä§Ìä∏ Î∞∞Ïó¥ Î≥ÄÏàò
declare -a OUTPUT_LINES

# ÎÇ†Ïßú Ïù∏Ïûê Ï≤òÎ¶¨ (Í∏∞Ï§ÄÏùº)
REFERENCE_DATE=${1:-$(date +%Y-%m-%d)}

# ÏöîÏùº Ïù¥Î¶Ñ Î∞∞Ïó¥ (ÏõîÏöîÏùºÎ∂ÄÌÑ∞ ÏãúÏûë)
WEEKDAYS=("ÏõîÏöîÏùº" "ÌôîÏöîÏùº" "ÏàòÏöîÏùº" "Î™©ÏöîÏùº" "Í∏àÏöîÏùº" "ÌÜ†ÏöîÏùº" "ÏùºÏöîÏùº")

# ÏûÑÏãú ÌååÏùº ÏÉùÏÑ±
REPO_DATA=$(mktemp)
GIT_DIRS=$(mktemp)
WEEK_DATES_FILE=$(mktemp)
COMMIT_LOG_FILE=$(mktemp)
OUTPUT_FILE=$(mktemp)

# Ï¢ÖÎ£å Ïãú ÏûÑÏãú ÌååÏùº Ï†ïÎ¶¨
cleanup() {
    rm -f "$REPO_DATA" "$GIT_DIRS" "$WEEK_DATES_FILE" "$COMMIT_LOG_FILE" "$OUTPUT_FILE"
}
trap cleanup EXIT

# Ï£ºÏùò ÏãúÏûëÏùº(ÏõîÏöîÏùº)Í≥º Ï¢ÖÎ£åÏùº(ÏùºÏöîÏùº) Í≥ÑÏÇ∞
calculate_week_dates() {
    local ref_date="$1"
    
    # macOSÏóêÏÑú ÏöîÏùº Íµ¨ÌïòÍ∏∞ (1=ÏõîÏöîÏùº, 7=ÏùºÏöîÏùº)
    local day_of_week=$(date -j -f "%Y-%m-%d" "$ref_date" "+%u")
    
    # ÏöîÏùºÏóê Îî∞Îùº ÏõîÏöîÏùº ÎÇ†Ïßú Í≥ÑÏÇ∞
    local days_to_monday=$((day_of_week - 1))
    if [ $days_to_monday -eq 0 ]; then
        WEEK_START="$ref_date"
    else
        WEEK_START=$(date -j -v-${days_to_monday}d -f "%Y-%m-%d" "$ref_date" +%Y-%m-%d)
    fi
    
    # ÏöîÏùºÏóê Îî∞Îùº ÏùºÏöîÏùº ÎÇ†Ïßú Í≥ÑÏÇ∞
    local days_to_sunday=$((7 - day_of_week))
    if [ $days_to_sunday -eq 0 ]; then
        WEEK_END="$ref_date"
    else
        WEEK_END=$(date -j -v+${days_to_sunday}d -f "%Y-%m-%d" "$ref_date" +%Y-%m-%d)
    fi
    
    # Ï£ºÍ∞Ñ ÎÇ†Ïßú Î∞∞Ïó¥ ÏÉùÏÑ± (Ïõî~Ïùº)
    for i in {0..6}; do
        date -j -v+${i}d -f "%Y-%m-%d" "$WEEK_START" +%Y-%m-%d >> "$WEEK_DATES_FILE"
    done
    
    echo "Ï£ºÍ∞Ñ Ïª§Î∞ã Ï°∞Ìöå: $WEEK_START ~ $WEEK_END" | tee -a "$OUTPUT_FILE"
}

# Ï†ÄÏû•ÏÜå ÏàúÌöå Î∞è Ïª§Î∞ã ÌôïÏù∏ Ìï®Ïàò
find_git_repos() {
    local base_dir="$1"
    
    # .git ÎîîÎ†âÌÑ∞Î¶¨ Ï∞æÍ∏∞ (ÏûÑÏãú ÌååÏùº ÏÇ¨Ïö©)
    find "$base_dir" -maxdepth "$MAX_DEPTH" -type d -name ".git" > "$GIT_DIRS"
    
    while IFS= read -r git_dir; do
        repo_dir=$(dirname "$git_dir")  # .gitÏùò ÏÉÅÏúÑ Ìè¥ÎçîÍ∞Ä Ïã§Ï†ú ÌîÑÎ°úÏ†ùÌä∏ Ìè¥Îçî
        repo_name=$(basename "$repo_dir")
        local has_commits=false
        
        # Git Ï†ÄÏû•ÏÜåÏù∏ÏßÄ ÌôïÏù∏
        if cd "$repo_dir" && git rev-parse --is-inside-work-tree &>/dev/null; then
            if git log --oneline &>/dev/null; then
                # Ï£ºÏùò Í∞Å ÎÇ†ÏßúÏóê ÎåÄÌï¥ Ïª§Î∞ã ÌôïÏù∏
                day_index=0
                while IFS= read -r current_date; do
                    # Ìï¥Îãπ ÎÇ†ÏßúÏùò Ïª§Î∞ã Î°úÍ∑∏ Í∞ÄÏ†∏Ïò§Í∏∞
                    git log --all --since="$current_date 00:00:00" --until="$current_date 23:59:59" --author="$(git config user.name)" --oneline | sed 's/^/[/; s/ /] /1' > "$COMMIT_LOG_FILE"
                    
                    if [ -s "$COMMIT_LOG_FILE" ]; then
                        has_commits=true
                        commit_count=$(wc -l < "$COMMIT_LOG_FILE" | tr -d ' ')
                        
                        # Ï†ÄÏû•ÏÜåÏôÄ ÏöîÏùºÎ≥ÑÎ°ú Ïª§Î∞ã Ï†ÄÏû• (ÌååÏùºÏóê Ï†ÄÏû•)
                        echo "COMMIT_DATA:$repo_name:$day_index:START" >> "$REPO_DATA"
                        cat "$COMMIT_LOG_FILE" >> "$REPO_DATA"
                        echo "COMMIT_DATA:$repo_name:$day_index:END" >> "$REPO_DATA"
                        
                        ((TOTAL_COMMITS+=commit_count))
                    fi
                    
                    ((day_index++))
                done < "$WEEK_DATES_FILE"
                
                # Ïù¥ Ï†ÄÏû•ÏÜåÏóê Ïª§Î∞ãÏù¥ ÏûàÏúºÎ©¥ Ïπ¥Ïö¥Ìä∏ Ï¶ùÍ∞Ä
                if [ "$has_commits" = true ]; then
                    ((TOTAL_REPOS++))
                    echo "REPO:$repo_name" >> "$REPO_DATA"
                fi
            fi
        fi
    done < "$GIT_DIRS"
}

# ÏöîÏùºÎ≥Ñ Í∑∏Î£πÌïëÎêú Ï∂úÎ†• ÏÉùÏÑ± Ìï®Ïàò
generate_grouped_output() {
    # Ï†ÄÏû•ÏÜå Î™©Î°ù Ï∂îÏ∂ú
    grep "^REPO:" "$REPO_DATA" | sort | uniq > "$GIT_DIRS"
    
    # Î®ºÏ†Ä ÏöîÏùºÎ≥Ñ Í∑∏Î£πÌïë
    for day_index in {0..6}; do
        # Ìï¥Îãπ ÏöîÏùºÏóê Ïª§Î∞ãÏù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
        if grep -q "COMMIT_DATA:.*:$day_index:" "$REPO_DATA"; then
            echo "" >> "$OUTPUT_FILE"
            echo "${WEEKDAYS[$day_index]}" >> "$OUTPUT_FILE"
            
            # Î†àÌè¨ÏßÄÌÜ†Î¶¨Î≥ÑÎ°ú ÏàúÌöå
            while IFS= read -r repo_line; do
                repo_name=${repo_line#REPO:}
                
                # Ìï¥Îãπ ÏöîÏùºÏùò Ïù¥ Î†àÌè¨ÏßÄÌÜ†Î¶¨ Ïª§Î∞ã Îç∞Ïù¥ÌÑ∞ ÏãúÏûë ÌÉúÍ∑∏ Ï∞æÍ∏∞
                if grep -q "^COMMIT_DATA:$repo_name:$day_index:START" "$REPO_DATA"; then
                    echo "    Repository: $repo_name" >> "$OUTPUT_FILE"
                    
                    # ÏãúÏûë ÌÉúÍ∑∏ÏôÄ Ï¢ÖÎ£å ÌÉúÍ∑∏ ÏÇ¨Ïù¥Ïùò Î™®Îì† ÎùºÏù∏ Ï∂îÏ∂ú
                    start_line=$(grep -n "^COMMIT_DATA:$repo_name:$day_index:START" "$REPO_DATA" | cut -d':' -f1)
                    end_line=$(grep -n "^COMMIT_DATA:$repo_name:$day_index:END" "$REPO_DATA" | cut -d':' -f1)
                    
                    if [ -n "$start_line" ] && [ -n "$end_line" ]; then
                        # ÏãúÏûë ÎùºÏù∏ Îã§ÏùåÎ∂ÄÌÑ∞ Ï¢ÖÎ£å ÎùºÏù∏ Ï†ÑÍπåÏßÄÏùò ÎÇ¥Ïö© Ï∂îÏ∂ú
                        sed -n "$((start_line+1)),$((end_line-1))p" "$REPO_DATA" | while IFS= read -r line; do
                            echo "        $line" >> "$OUTPUT_FILE"
                        done
                    fi
                fi
            done < "$GIT_DIRS"
        fi
    done
}

# Î©îÏù∏ Ïã§Ìñâ ÏΩîÎìú
# Ï£º ÏãúÏûëÏùº/Ï¢ÖÎ£åÏùº Í≥ÑÏÇ∞
calculate_week_dates "$REFERENCE_DATE"

# Î™®Îì† ÏßÄÏ†ï ÎîîÎ†âÌÑ∞Î¶¨ÏóêÏÑú Git Ï†ÄÏû•ÏÜå Í≤ÄÏÉâ
for dir in "${SEARCH_DIRS[@]}"; do
    if [ -d "$dir" ]; then
        find_git_repos "$dir"
    fi
done

# Í∑∏Î£πÌïëÎêú Ï∂úÎ†• ÏÉùÏÑ±
generate_grouped_output

# ÏöîÏïΩ Ï∂úÎ†•
echo "" >> "$OUTPUT_FILE"
echo "üîç Ï£ºÍ∞Ñ ÏöîÏïΩ ($WEEK_START ~ $WEEK_END)" >> "$OUTPUT_FILE"
echo "üìÇ Ïª§Î∞ã ÌôúÎèôÏù¥ ÏûàÎäî Ï†ÄÏû•ÏÜå: $TOTAL_REPOS" >> "$OUTPUT_FILE"
echo "üìù Ï¥ù Ïª§Î∞ã Ïàò: $TOTAL_COMMITS" >> "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"

# Ï∂úÎ†• ÌååÏùº ÎÇ¥Ïö© ÌëúÏãú
cat "$OUTPUT_FILE"

# Ï∂úÎ†• ÎÇ¥Ïö© ÌÅ¥Î¶ΩÎ≥¥Îìú Ï†ÄÏû• (macOSÏóêÏÑú pbcopy ÏÇ¨Ïö©)
cat "$OUTPUT_FILE" | pbcopy